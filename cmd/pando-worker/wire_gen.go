// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/fox-one/pando/cmd/pando-worker/config"
	asset2 "github.com/fox-one/pando/service/asset"
	message2 "github.com/fox-one/pando/service/message"
	oracle2 "github.com/fox-one/pando/service/oracle"
	"github.com/fox-one/pando/service/user"
	"github.com/fox-one/pando/store/asset"
	"github.com/fox-one/pando/store/collateral"
	"github.com/fox-one/pando/store/flip"
	"github.com/fox-one/pando/store/message"
	"github.com/fox-one/pando/store/oracle"
	"github.com/fox-one/pando/store/proposal"
	"github.com/fox-one/pando/store/transaction"
	"github.com/fox-one/pando/store/vault"
	"github.com/fox-one/pando/store/wallet"
	"github.com/fox-one/pando/worker/cashier"
	"github.com/fox-one/pando/worker/messenger"
	"github.com/fox-one/pando/worker/payee"
	"github.com/fox-one/pando/worker/pricesync"
	"github.com/fox-one/pando/worker/spentsync"
	"github.com/fox-one/pando/worker/syncer"
	"github.com/fox-one/pando/worker/txsender"
	"github.com/fox-one/pkg/store/property"
)

// Injectors from wire.go:

func buildApp(cfg *config.Config) (app, error) {
	db, err := provideDatabase(cfg)
	if err != nil {
		return app{}, err
	}
	walletStore := wallet.New(db)
	client, err := provideMixinClient(cfg)
	if err != nil {
		return app{}, err
	}
	system := provideSystem(cfg)
	walletService := provideWalletService(client, cfg, system)
	cashierCashier := cashier.New(walletStore, walletService, system)
	messageStore := message.New(db)
	messageService := message2.New(client)
	messengerMessenger := messenger.New(messageStore, messageService)
	assetStore := asset.New(db)
	assetService := asset2.New(client)
	transactionStore := transaction.New(db)
	proposalStore := proposal.New(db)
	collateralStore := Collateral.New(db)
	vaultStore := vault.New(db)
	flipStore := flip.New(db)
	store := propertystore.New(db)
	userService := user.New(client)
	parliament := provideParliament(messageStore, userService, assetService, walletService, collateralStore, system)
	oracleStore := oracle.New(db)
	oracleService := oracle2.New()
	payeePayee := payee.New(assetStore, assetService, walletStore, transactionStore, proposalStore, collateralStore, vaultStore, flipStore, store, parliament, oracleStore, oracleService, system)
	sync := pricesync.New(assetStore, assetService)
	notifier := provideNotifier(system, assetService, messageStore)
	spentSync := spentsync.New(walletStore, notifier)
	sender := txsender.New(walletStore)
	syncerSyncer := syncer.New(walletStore, walletService, store)
	v := provideWorkers(cashierCashier, messengerMessenger, payeePayee, sync, spentSync, sender, syncerSyncer)
	mux := provideRoute()
	server := provideServer(mux)
	mainApp := app{
		workers: v,
		server:  server,
	}
	return mainApp, nil
}
